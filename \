import unittest
import numpy as np

from sparseklearn import pairwise_distances

class DataGenerator():

    def pwdist_U0_W0_Sig0_Pow1(self):
        result = np.zeros((2, 2), dtype = np.float64)
        dist = np.abs(7-1)+ np.abs(4-3)
        result[0,1] = dist
        result[1,0] = dist
        return result


    def __init__(self):

        self.RHDX = np.array([[1, 9, 8],
                              [7, 4, 3],
                              [2, 8, 7],
                              [4, 1, 3]], dtype = np.float64)

        self.mask = np.array([[1, 2, 4],
                              [2, 3, 4],
                              [0, 2, 4],
                              [1, 2, 3]], dtype = np.int64)

        self.S = np.array([1,3], dtype = np.int64)

        self.W = np.array([[0, 2, 7],
                           [4, 1, 8],
                           [1, 6, 4],
                           [3, 2, 8]], dtype = np.float64)

        self.U = np.array([[0, 6, 8, 3, 1],
                           [1, 3, 4, 7, 5],
                           [8, 9, 0, 4, 2]], dtype = np.float64)

        self.Sigma = np.array([[2, 3, 1, 1, 6],
                               [7, 2, 1, 5, 4],
                               [4, 2, 8, 9, 1]], dtype = np.float64)

        self.N = 4
        self.Q = 3
        self.P = 5
        self.K = 3

        self._U0_W0_Sig0_Pow1 = self.pwdist_U0_W0_Sig0_Pow1()

class TestFastLAMethods(unittest.TestCase):

    def setUp(self):
        self.testdata = DataGenerator()

    def test_U0_W0_Sig0_Pow1(self):
        result = pairwise_distances(RHDX = self.testdata.RHDX,
                                    mask = self.testdata.mask,
                                    S = self.testdata.S,
                                    W = None,
                                    U = None,
                                    Sigma = None,
                                    power = 1,
                                    P = self.testdata.P)
        self.assertEqual(self._U0_W0_Sig0_Pow1, result)

    #_U0_W0_Sig0_Pow2(self)
    #_U1_W0_Sig0_Pow1(self)
    #_U1_W0_Sig0_Pow2(self)
    #_U1_W0_Sig1_Pow1(self)
    #_U1_W0_Sig1_Pow2(self)
    #_U1_W1_Sig0_Pow1(self)
    #_U1_W1_Sig0_Pow2(self)
    #_U1_W1_Sig1_Pow1(self)
    #_U1_W1_Sig1_Pow2(self)

    #pairwise_distances(RHDX, mask, S, W, U, Sigma, power, P)


if __name__ == '__main__':
    unittest.main()
