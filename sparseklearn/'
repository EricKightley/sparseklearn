import numpy as np
from sparseklearn import Sparsifier
import sklearn.random_projection as rp
from sklearn.metrics.pairwise import pairwise_distances

#np.random.seed(12)

P = 500
N = 100
alpha1, alpha2 = 1.0, 0.1


qvec = np.linspace(3,P/2,100,dtype=int)

X = np.random.rand(N,P)
preconditioner = Sparsifier(compression_target = 1.0)
preconditioner.fit_sparsifier(X)
HDX = preconditioner.HDX 
D_indices = preconditioner.D_indices

exact_pd = pairwise_distances(X)
upper_inds = np.triu_indices(N,1)

normalizer = exact_pd[upper_inds]

means_ours1 = []
mins_ours1 = []
maxs_ours1 = []
stds_ours1 = []

means_ours2 = []
mins_ours2 = []
maxs_ours2 = []
stds_ours2 = []

means_ref = []
mins_ref = []
maxs_ref = []
stds_ref = []

for q in qvec:
    spr1 = Sparsifier(compression_target = q, alpha_target = alpha1, precond_D = D_indices)
    spr1.fit_sparsifier(HDX=HDX)

    spr2 = Sparsifier(compression_target = q, alpha_target = alpha2, precond_D = D_indices)
    spr2.fit_sparsifier(HDX=HDX)

    pd_ours1 = spr1.pairwise_distances()[upper_inds]
    pd_ours2 = spr2.pairwise_distances()[upper_inds]
    pd_ref = pairwise_distances(
            rp.SparseRandomProjection(n_components = q).fit_transform(X))[upper_inds]

    pd_ours1 /= normalizer
    pd_ours2 /= normalizer
    pd_ref /= normalizer

    means_ours1.append(pd_ours1.mean())
    mins_ours1.append(pd_ours1.min())
    maxs_ours1.append(pd_ours1.max())
    stds_ours1.append(pd_ours1.std())

    means_ours2.append(pd_ours2.mean())
    mins_ours2.append(pd_ours2.min())
    maxs_ours2.append(pd_ours2.max())
    stds_ours2.append(pd_ours2.std())

    means_ref.append(pd_ref.mean())
    mins_ref.append(pd_ref.min())
    maxs_ref.append(pd_ref.max())
    stds_ref.append(pd_ref.std())
    

data_ours1 = np.vstack((means_ours1, mins_ours1, maxs_ours1, stds_ours1))
data_ours2 = np.vstack((means_ours2, mins_ours2, maxs_ours2, stds_ours2))
data_ref = np.vstack((means_ref, mins_ref, maxs_ref, stds_ref))

np.save('data_ours1.npy', data_ours1)
np.save('data_ours2.npy', data_ours2)
np.save('data_ref.npy', data_ref)
np.save('qvec.npy', qvec)
np.save('const.npy',[N,P,alpha1,alpha2])


#GaussianRandomProjection, SparseRandomProjection, johnson_lindenstrauss_min_dim
